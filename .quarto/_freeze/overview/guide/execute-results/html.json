{
  "hash": "191b1a422c72ea26b82b0ef0b13877c4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Guide through Quarto\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-copy: true\n    code-overflow: wrap\n    code-tools: true\nengine: julia\n---\n\n# Markdown basics\n\n## Overview\n\nQuarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\n\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\n> A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of [Pandoc’s Markdown](https://pandoc.org/MANUAL.html#pandocs-markdown) for more in-depth documentation.\n\n## Text Formatting\n\n| Markdown Syntax                           | Output                                  |\n|-------------------------------------------|:----------------------------------------|\n| `*italics*, **bold**, ***bold italics***` | *italics*, **bold**, ***bold italics*** |\n| `superscript^2^ / subscript~2~`           | superscript^2^ / subscript~2~           |\n| `~~strikethrough~~`                       | ~~strikethrough~~                       |\n| `` `verbatim code` ``                     | `verbatim code`                         |\n\n: Some markdown syntax to know\n\n## Headings\n\n| Markdown Syntax   | Output          |\n|-------------------|:----------------|\n| `# Header 1`      | [Header 1]{.h1} |\n| `## Header 2`     | [Header 2]{.h2} |\n| `### Header 3`    | [Header 3]{.h3} |\n| `#### Header 4`   | [Header 4]{.h4} |\n| `##### Header 5`  | [Header 5]{.h5} |\n| `###### Header 6` | [Header 6]{.h6} |\n\n: Headings in Quarto markdown\n\n## Links and images\n\n| Markdown Syntax                                                      | Output                                                                                              |\n|----------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------|\n| `<https://quarto.org>`                                               | <https://quarto.org>                                                                                |\n| `[Quarto](https://quarto.org)`                                       | [Quarto](https://quarto.org)                                                                        |\n| `![A cool panda image](panda.png)`                                   | ![A cool panda image](../img/illustration_quarto_imd_insert.jpeg)                                   |\n| `[![A cool panda image](panda.png)](https://quarto.org)`             | [![A cool panda image](../img/illustration_quarto_imd_insert.jpeg)](https://quarto.org)             |\n| `[![](panda.png){fig-alt=\"A cool panda image\"}](https://quarto.org)` | [![](../img/illustration_quarto_imd_insert.jpeg){fig-alt=\"A cool panda image\"}](https://quarto.org) |\n\n## Lists\n\n## Tables\n\n[Markdown Syntax]{style=\"font-size: 24px\"}\n\n``` default\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n```\n\n[Output]{style=\"font-size: 24px\"}\n\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n\n## Sources code\n\nCode are inserted in Quarto mainly like in Rmarkdown. One major difference is the fact that it is possible to add a simple snippet of code in Quarto like by using simple three quotes: \\`\\`\\`default\n\n[Markdown syntax]{style=\"font-size: 24px\"}\n\n```` default\n    ```default\n    Code here\n    ```\n````\n\n[Output]{style=\"font-size: 24px\"}\n\n``` default\n    Code here\n```\n\nNotice that we wrote `default`. That is used for a language that is not supported by Quarto directly, and without that `default`, it will considered as a code snippet:\n\n[Markdown syntax]{style=\"font-size: 24px\"}\n\n```` default\n    ```\n    Code here\n    ```\n````\n\n[Output]{style=\"font-size: 24px\"}\n\n```         \n    Code here\n```\n\nFor a supported language, we use the following:\n\n[Markdown syntax]{style=\"font-size: 24px\"}\n\n```` default\n\n    ```{.language-name}\n        code\n    ```\n````\n\nFor example:\n\n```` default\n\n    ```{.python}\n        1 + 1\n    ```\n````\n\n``` python\n    1 + 1\n```\n\nThis is still a code snippet.\n\nTo insert a code that is supposed to run, we remove the `.` in the brackets:\n\nFor example:\n\n::: {#f00079af .cell execution_count=1}\n``` {.python .cell-code}\n    1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n2\n```\n:::\n:::\n\n\n## Equations\n\nUse `$` delimiters for inline math and `$$` delimiters for display math. For example:\n\n| Markdown Syntax                | Output                       |\n|--------------------------------|:-----------------------------|\n| `inline math: $E = mc^{2}$`    | inline math: $E = mc^{2}$    |\n| `display math: $$E = mc^{2}$$` | display math: $$E = mc^{2}$$ |\n\n## Diagrams\n\nQuarto has native support for embedding Mermaid and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gantt charts, and more using a plain text syntax inspired by markdown.\n\nExample:\n\n[Markdown syntax]{style=\"font-size: 24px\"}\n\n```` default\n    ```{mermaid}\nflowchart LR\nA[Hard edge] --> B(Round edge)\nB --> C{Decision}\nC --> D[Result one]\nC --> E[Result two]\n```\n````\n\n[Output]{style=\"font-size: 24px\"}\n\n\n```{mermaid}\n\nflowchart LR\n    A[Hard edge] --> B(Round edge)\n    B --> C{Decision}\n    C --> D[Result one]\n    C --> E[Result two]\n```\n\n\n### Mermaid\n\nMermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.\n\nMermaid diagrams use `%%` as their comment syntax, and so cell options are declared using `%%|`. Cell options must be included directly beneath the start of the diagram code chunk.\n\nAbove we demonstrated a flowchart created with Mermaid, here is a sequence diagram (also embedded using a `{mermaid}` executable cell):\n\n```` default\n    ```{mermaid}\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts <br/>prevail!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n```\n````\n\n\n```{mermaid}\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts <br/>prevail!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n```\n\n\n### Graphviz\n\nThe Graphviz layout programs take descriptions of graphs in a simple text language, and make diagrams in useful formats. Graphviz has many useful features for concrete diagrams, such as options for colors, fonts, tabular node layouts, line styles, hyperlinks, and custom shapes.\n\nGraphviz diagrams use `//` as their comment syntax, and so cell options are declared using `//|`. Cell options must be included directly beneath the start of the diagram code chunk.\n\nFor example, here is a simple undirected graph created using graphviz:\n\n```` default\n    ::: {#fig-simple}\n\n    ```{dot}\ngraph G {\nlayout=neato\nrun -- intr;\nintr -- runbl;\nrunbl -- run;\nrun -- kernel;\nkernel -- zombie;\nkernel -- sleep;\nkernel -- runmem;\nsleep -- swap;\nswap -- runswap;\nrunswap -- new;\nrunswap -- runmem;\nnew -- runmem;\nsleep -- runmem;\n}\n```\n\n    This is a simple graph with Graphviz\n    :::\n````\n\n::: {#fig-simple}\n\n```{dot}\n    graph G {\n        layout=neato\n        run -- intr;\n        intr -- runbl;\n        runbl -- run;\n        run -- kernel;\n        kernel -- zombie;\n        kernel -- sleep;\n        kernel -- runmem;\n        sleep -- swap;\n        swap -- runswap;\n        runswap -- new;\n        runswap -- runmem;\n        new -- runmem;\n        sleep -- runmem;\n    }\n```\n\n\nThis is a simple graph with Graphviz\n:::\n\n## Videos\n\nYou can embed videos in documents using the `video` shortcode. For example, here we embed a YouTube video\n\nHere is an example:\n\n\n{{< video https://www.youtube.com/watch?v=EbAAmrB0luA&t >}}\n\n\n\n## Embeds\n\nIt is possible to embed `.qmd` and `.ipynb` files into a Quarto document. [Here](), you can see examples of it. For HTML outputs, it is possible to embed `.pdf` files too.\n\nHere is an example:\n\n\n```{=html}\n<object data=\"../utility/illustration_embed_pdf_quarto.pdf\" type=\"application/pdf\" width=\"100%\" height=\"100%\" style=\"min-height:100vh;\">\n    <p>It appears you don't have a PDF plugin for this browser.\n    No biggie... you can <a href=\"../utility/illustration_embed_pdf_quarto.pdf\">click here to\n    download the PDF file.</a></p>\n</object>\n```\n\n## Callout Blocks\n\nCallouts are an excellent way to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios.\n\n### Callout Types\n\nThere are five different types of callouts available.\n\n-   note\n-   warning\n-   important\n-   tip\n-   caution\n\nThe color and icon will be different depending upon the type that you select. Here are what the various types look like in HTML output:\n\n::: {.callout-note collapse=\"true\"}\nNote that there are five types of callouts, including: `note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Tip with Title\n\nThis is an example of a callout with a title.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n\n### Markdown Syntax\n\n``` default\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n```\n\n### Collapse\n\nYou can create ‘folded’ callouts that can be expanded by the user by settings the collapse attribute on the callout. If you set `collapse=true`, the callout will be expandable, but will be collapsed by default. If you set `collapse=false`, the callout will be expandable, but will be expanded by default.\n\n### Appearance\n\nCallouts have 3 different looks you can use.\n\n|           |                                                                                                                 |\n|-----------|:----------------------------------------------------------------------------------------------------------------|\n| `default` | The default appearance with colored header and an icon.                                                         |\n| `simple`  | A lighter weight appearance that doesn’t include a colored header background.                                   |\n| `minimal` | A minimal treatment that applies borders to the callout, but doesn’t include a header background color or icon. |\n\n: Callouts looks {tbl-colwidths=\"\\[25,75\\]\"}\n\nPlease refer to the [quarto website](https://quarto.org/) for more information.\n\n# Languages supported by Quarto\n\n::: panel-tabset\n## Python\n\nAs an example, we will try KNN on a quarto document:\n\n### Create and plot the dataset\n\n::: {#b2416866 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.scatter(x, y, c=classes)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](guide_files/figure-html/cell-3-output-1.png){width=566 height=411}\n:::\n:::\n\n\n### Train the model\n\n::: {#fe1ced06 .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndata = list(zip(x, y))\nknn = KNeighborsClassifier(n_neighbors=5)\n\nknn.fit(data, classes)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<style>#sk-container-id-3 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-3 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-3 pre {\n  padding: 0;\n}\n\n#sk-container-id-3 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-3 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-3 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-3 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-3 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-3 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-3 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-3 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-3 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-3 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n#sk-container-id-3 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-3 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-3 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-3 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-3 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-3 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-3 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n### Use it for classification\n\n::: {#2ec7a157 .cell execution_count=4}\n``` {.python .cell-code}\nnew_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\n\nprediction = knn.predict(new_point)\n\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](guide_files/figure-html/cell-5-output-1.png){width=566 height=411}\n:::\n:::\n\n\n## R\n\n### Air Quality\n\nPlease refer to [quarto website](https://quarto.org/) for more.\n\n\n## Julia\n\nHere is a sample code:\n\n\n```{julia}\nusing GLMakie, SGtSNEpi, SNAPDatasets\n\nGLMakie.activate!()\n\ng = loadsnap(:as_caida)\ny = sgtsnepi(g);\nshow_embedding(y;\n  A = adjacency_matrix(g),        # show edges on embedding\n  mrk_size = 1,                   # control node sizes\n  lwd_in = 0.01, lwd_out = 0.001, # control edge widths\n  edge_alpha = 0.03 )             # control edge transparency\n```\n\n\nPlease refer to [quarto website](https://quarto.org/) for more.\n\n## Observable Javascript\n\nHere is a sample code:\n\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass_g\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n\nPlease refer to [quarto website](https://quarto.org/) for more.\n:::\n\n\n# What can be done with Quarto ?\n\n::: panel-tabset\n\n## Documents\n\nWith Quarto, we can create a wide range of different file formats. Here, we are going to talk about the most important ones.\n\n|                |                    |\n|--------------------------------|:-----------------------------|\n| HTML    |   [Example of html generation]()   |\n| PDF | [Example of pdf generation]() |\n| MS Word | [Example of MS Word generation]() |\n| Markdown | [Example of Markdown generation]() |\n| Typst | [Example of Typst generation]() |\n\n: {tbl-colwidths=\"\\[20,80\\]\"}\n\n### HTML Documents\n\nUse the html format to create HTML output. For example:\n\n```default\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n---\n```\n\nWe've already through how we generate HTML file with Quarto.\nNow, let's see how to publish the generated file\n\nThe `quarto publish` command provides a straightforward way to publish documents to [Quarto Pub](https://quarto.org/docs/publishing/quarto-pub.html), [GitHub Pages](https://pages.github.com/), [Netlify](https://www.netlify.com/), and [Posit Connect](https://posit.co/products/enterprise/connect/).\n\nFor example, here are the commands to publish `document.qmd` to each of these services:\n\n```default\nquarto publish quarto-pub document.qmd\nquarto publish gh-pages document.qmd\nquarto publish netlify document.qmd\nquarto publish connect document.qmd\n```\n\n### PDF Documents\n\nThe YAML heading of Quarto PDF files are almost similar to Rmarkdown PDF files. The base syntax remains unchanged.\n\nUse the pdf format to create PDF output. For example:\n\n```default\n---\ntitle: \"My document\"\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n---\n```\n\n#### Prerequisites\n\nIn order to create PDFs you will need to install a recent distribution of TeX. We recommend the use of TinyTeX (which is based on TexLive), which you can install with the following command:\n\n```default\nquarto install tinytex\n```\n\n#### Document Class\n\nQuarto uses [KOMA Script](https://ctan.org/pkg/koma-script) document classes by default for PDF documents and books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.\n\nFor PDF documents this results in the following Pandoc options set by default:\n\n```default\ntitle: \"My document\"\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n    documentclass: scrartcl\n    papersize: letter\n```\n\nYou can set `documentclass` to the standard `article`, `report` or `book` classes, to the KOMA Script equivalents `scrartcl`, `scrreprt`, and `scrbook` respectively, or to any other class made available by LaTeX packages you have installed.\n\n::: {.callout-note}\nSetting your `documentclass` to either `book` or `scrbook` will automatically handle many of the common needs for printing and binding PDFs into a physical book (i.e., chapters start on odd pages, alternating margin sizes, etc).\n:::\n\n### MS Word Documents\n\nThe YAML heading and base syntax are generally the same as Rmarkdown\n\nUse the `docx` format to create MS Word output. For example:\n\n```default\n---\ntitle: \"My Document\"\nformat:\n  docx:\n    toc: true\n    number-sections: true\n    highlight-style: github\n---\n```\n\n## Presentations\n\nQuarto supports a variety of formats for creating presentations, including:\n\n|                |                    |\n|--------------------------------|:-----------------------------|\n| revealjs    |   [reveal.js](https://revealjs.com/) (HTML)   |\n| pptx | [PowerPoint](https://quarto.org/docs/presentations/powerpoint.html) (MS Office) |\n| beamer | [Beamer](https://ctan.org/pkg/beamer) (LaTeX/PDF) |\n\n: {tbl-colwidths=\"\\[20,80\\]\"}\n\nThere are pros and cons to each of these formats. The most capable format by far is `revealjs`, so it is highly recommended unless you have specific Office or LaTeX output requirements. Note that `revealjs` presentations can be presented as HTML slides or can be printed to PDF for easier distribution.\n\nPowerPoint and beamer generation are similar to what is done in Rmarkdown.\n\nYou can create Revealjs presentations using the `revealjs` format.\n\n```default\n---\ntitle: \"My document\"\nauthor: \"Guerzoniansu\"\nformat: revealjs\n---\n```\n\n### Demo\n\n```default\n---\ntitle: \"My document\"\nauthor: \"Guerzoniansu\"\nformat: revealjs\n---\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\n```\n\n\n{{< embed ../examples/creating_slide_presentation_revaljs.qmd >}}\n\n\n\n## Dashboards\n\n::: {.callout-note}\nThis feature is new in Quarto 1.4. Download the latest version of Quarto at the [download page](https://quarto.org/docs/download/)\n:::\n\nQuarto Dashboards make it easy to create interactive dashboards using Python, R, Julia, and Observable:\n\n* Publish a group of related data visualizations as a dashboard. Use a wide variety of components including [Plotly](https://plotly.com/python/), [Leaflet](https://ipyleaflet.readthedocs.io/en/latest/), [Jupyter Widgets](https://quarto.org/docs/interactive/widgets/jupyter.html), [htmlwidgets](https://www.htmlwidgets.org/); static graphics (Matplotlib, Seaborn, ggplot2, etc.); tabular data; value boxes; and text annotations.\n\n* Flexible and easy to specify row and column-based Layouts. Components are intelligently re-sized to fill the browser and adapted for display on mobile devices.\n\n* Author using any notebook editor (JupyterLab, etc.) or in plain text markdown with any text editor (VS Code, RStudio, Neovim, etc.)\n\n* Dashboards can be deployed as static web pages (no special server required) or you can optionally integrate a backend Shiny Server for enhanced interactivity.\n\n### Examples\n\nYou can create highly customized layouts and use a wide variety of dashboard themes.\nPlease refer to the [dashboard examples](https://quarto.org/docs/dashboards/examples/) page on Quarto Guide\n\n### Walkthrough\n\nLearning to make Dashboards in Quarto can be pretty complex. So here are steps, you could follow to improve quickly\n\n#### Step 1: Install the latest version of Quarto\n\nHere is the [link](https://quarto.org/docs/download/prerelease.html).\n\n#### Step 2: Learn the basics\n\nStart by learning how to lay out your dashboard and populate it with content:\n\n[Dashboard Layout](https://quarto.org/docs/dashboards/layout.html) shows you how to control the navigation bar, and how to arrange your content across pages, rows, columns, tabsets, and cards.\n\n[Data Display](https://quarto.org/docs/dashboards/data-display.html) shows you how to display data in your dashboard as plots, tables, value boxes, and text.\n\n#### Step 3: Explore further\n\nOnce you’ve mastered the basics, check out these additional articles to learn more.\n\n<a class=\"guide\" href=\"https://quarto.org/docs/dashboards/#getting-started\">Get started</a>\n\n\n## Websites and books\n\nWe will discuss about websites only but know books are created the exact way websites are made in editors.\n\n### Quick Start\n\nFirst, you need to choose a text editor. In the following, we will tell the steps to create a quarto website project in VS Code.\n\nTo create a new website project within VS Code, execute the **Quarto: Create Project** command from the command-palette:\n\n<img src=\"../img/illustration_create_quarto_website_project_vscode.png\" alt=\"Illustration create quarto website project in vs code\"  class=\"img-illu-quarto demo-vscode-webproject\">\n\nThen, select **Website Project**:\n\n<img src=\"../img/illustration_create_quarto_website_project_vscode_2.png\" alt=\"Illustration create quarto website project in vs code 2\"  class=\"img-illu-quarto demo-vscode-webproject-2\">\n\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project:\n\n<img src=\"../img/illustration_create_quarto_website_project_vscode_3.png\" alt=\"Illustration create quarto website project in vs code 3\"  class=\"img-illu-quarto demo-vscode-webproject-3\">\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website:\n\n<img src=\"../img/illustration_create_quarto_website_project_vscode_4.png\" alt=\"Illustration create quarto website project in vs code 4\"  class=\"img-illu-quarto demo-vscode-webproject-4\">\n\nNow navigate through this [site](https://quarto.org/docs/websites/) for more informations...\n\n:::\n\n## Rendering\n\nTo render documents, there are several ways.\n\nOn R:\n\nTo render the document, we click on the **render** button.\n<img src=\"../img/illustration_render_document_r_quarto.png\" alt=\"Illustration render quarto documents in R\"  class=\"img-illu-quarto demo-render-quarto-doc-r\">\n\nTo preview the document, we click on the **visual** button\n\n<img src=\"../img/illustration_preview_document_r_quarto.png\" alt=\"Illustration preview quarto documents in R\"  class=\"img-illu-quarto demo-preview-quarto-doc-r\">\n\nOn other editors:\n\nWe need to run these on the terminal:\n\n```default\nquarto preview (for preview)\nquarto render (for render)\n```\n\nNow, fell free to see our work and all the code in the projects tab\n\n<a class=\"guide\" href=\"../project.qmd\">See project files</a>\n\n",
    "supporting": [
      "guide_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}